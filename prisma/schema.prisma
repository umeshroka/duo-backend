generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id             String   @id @default(uuid())
    email          String   @unique
    hashedPassword String
    firstName      String?
    lastName       String?
    phoneNumber    String?
    createdAt      DateTime @default(now())

    aiArtworks           AiArtwork[]
    artworkEnquiries     ArtworkEnquiry[]
    serviceEnquiries     ServiceEnquiry[]
    masterclassEnquiries MasterclassEnquiry[]
}

model Artist {
    id          String   @id @default(uuid())
    name        String
    bio         String   @db.Text
    about       String   @db.Text
    nationality String
    birthYear   Int?
    deathYear   Int?
    isFeatured  Boolean  @default(false)
    createdAt   DateTime @default(now())

    artworks      Artwork[]
    mediaArticles MediaArticle[]
}

model MediaArticle {
    id        String    @id @default(uuid())
    title     String?
    source    String?
    url       String?
    imageUrl  String?
    content   String?   @db.Text
    date      DateTime?
    artistId  String
    artist    Artist    @relation(fields: [artistId], references: [id])
    createdAt DateTime  @default(now())
}

enum ArtworkMedium {
    Paper
    Silk
    Redpaper
}

enum ArtworkCategory {
    Painting
    Calligraphy
}

enum MountingMethod {
    Scroll
    Frame
    Board
    Unmounted
}

model Artwork {
    id              String           @id @default(uuid())
    title           String
    description     String?          @db.Text
    longDescription String?          @db.Text
    imageUrl        String
    medium          ArtworkMedium?
    category        ArtworkCategory?
    mounting        MountingMethod?
    heightCm        Float?
    widthCm         Float?
    year            Int?
    price           Float? // null if not for sale
    isFeatured      Boolean          @default(false)
    createdAt       DateTime         @default(now())

    artistId String
    artist   Artist @relation(fields: [artistId], references: [id])

    additionalTags   String[]
    artworkEnquiries ArtworkEnquiry[]
}

model Editorial {
    id          String   @id @default(uuid())
    title       String
    content     String   @db.Text
    imageUrl    String
    author      String
    publishedAt DateTime @default(now())
    createdAt   DateTime @default(now())

    tags String[]
}

model Masterclass {
    id                   String               @id @default(uuid())
    title                String
    description          String               @db.Text
    imageUrl             String?
    createdAt            DateTime             @default(now())
    masterclassEnquiries MasterclassEnquiry[]
}

enum ServiceType {
    Commission
    Consultation
    Authentication
    Appraisal
    Restoration
}

model Service {
    id               String           @id @default(uuid())
    title            String
    description      String           @db.Text
    imageUrl         String?
    type             ServiceType
    createdAt        DateTime         @default(now())
    serviceEnquiries ServiceEnquiry[]
}

model ArtworkEnquiry {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    subject   String
    message   String   @db.Text
    artworkId String
    artwork   Artwork  @relation(fields: [artworkId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ServiceEnquiry {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    subject   String
    message   String   @db.Text
    serviceId String
    service   Service  @relation(fields: [serviceId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MasterclassEnquiry {
    id            String      @id @default(uuid())
    userId        String
    user          User        @relation(fields: [userId], references: [id])
    subject       String
    message       String      @db.Text
    masterclassId String
    masterclass   Masterclass @relation(fields: [masterclassId], references: [id])
    selectedType  String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

enum ArtworkType {
    Calligraphy
    Painting_With_Calligraphy
}

model AiArtwork {
    id            String      @id @default(uuid())
    userId        String
    user          User        @relation(fields: [userId], references: [id])
    artworkType   ArtworkType
    subjectPrompt String      @db.Text

    calligraphyStyle String?
    paintingStyle    String?
    dynasty          String?
    technique        String?

    fullPrompt String   @db.Text
    imageUrl   String
    createdAt  DateTime @default(now())
}
